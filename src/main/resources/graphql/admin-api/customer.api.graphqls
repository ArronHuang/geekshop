extend type Query {
    customers(options: CustomerListOptions): CustomerList!
    customer(id: ID!): Customer
}

extend type Mutation {
    "Create a new Customer. If a password is provided, a new User will also be created an linked to the Customer."
    createCustomer(input: CreateCustomerInput!, password: String): Customer!

    "Update an existing Customer"
    updateCustomer(input: UpdateCustomerInput!): Customer!

    "Delete a Customer"
    deleteCustomer(id: ID!): DeletionResponse!

    "Create a new Address and associate it with the Customer specified by customerId"
    createCustomerAddress(customerId: ID!, input: CreateAddressInput!): Address!

    "Update an existing Address"
    updateCustomerAddress(input: UpdateAddressInput!): Address!

    "Update an existing Address"
    deleteCustomerAddress(id: ID!): Boolean!

    addNoteToCustomer(input: AddNoteToCustomerInput!): Customer
    updateCustomerNode(input: UpdateCustomerNoteInput!): HistoryEntry!
    deleteCustomerNote(id: ID!): DeletionResponse!
}


input UpdateCustomerInput {
    id: ID!
    title: String
    firstName: String
    lastName: String
    phoneNumber: String
    emailAddress: String
}

input AddNoteToCustomerInput {
    id: ID!
    note: String!
    isPublic: Boolean!
}

input UpdateCustomerNoteInput {
    nodeId: ID!
    note: String!
}